
# 1 "D:\ElabPh\SDMMC\PIC WAV Player\PIC18 SD WAV Audio Player\src\pff.c"

# 12 "D:\ElabPh\SDMMC\PIC WAV Player\PIC18 SD WAV Audio Player\src\integer.h"
typedef int INT;
typedef unsigned int UINT;


typedef signed char CHAR;
typedef unsigned char UCHAR;
typedef unsigned char BYTE;


typedef short SHORT;
typedef unsigned short USHORT;
typedef unsigned short WORD;
typedef unsigned short WCHAR;


typedef long LONG;
typedef unsigned long ULONG;
typedef unsigned long DWORD;


typedef enum { FALSE = 0, TRUE } BOOL;

# 75 "D:\ElabPh\SDMMC\PIC WAV Player\PIC18 SD WAV Audio Player\src\pff.h"
typedef struct _FATFS_ {
BYTE fs_type;
BYTE csize;
BYTE flag;
BYTE csect;
WORD n_rootdir;
BYTE* buf;
DWORD max_clust;
DWORD fatbase;
DWORD dirbase;
DWORD database;
DWORD fptr;
DWORD fsize;
DWORD org_clust;
DWORD curr_clust;
DWORD dsect;
} FATFS;

# 97
typedef struct _DIR_ {
WORD index;
BYTE* fn;
DWORD sclust;
DWORD clust;
DWORD sect;
} DIR;

# 109
typedef struct _FILINFO_ {
DWORD fsize;
WORD fdate;
WORD ftime;
BYTE fattrib;
char fname[13];
} FILINFO;

# 121
typedef enum {
FR_OK = 0,
FR_DISK_ERR,
FR_NOT_READY,
FR_NO_FILE,
FR_NO_PATH,
FR_NOT_OPENED,
FR_NOT_ENABLED,
FR_NO_FILESYSTEM
} FRESULT;

# 137
FRESULT pf_mount (FATFS*);
FRESULT pf_open (const char*);
FRESULT pf_read (void*, WORD, WORD*);
FRESULT pf_write (const void*, WORD, WORD*);
FRESULT pf_lseek (DWORD);
FRESULT pf_opendir (DIR*, const char*);
FRESULT pf_readdir (DIR*, FILINFO*);

# 11 "D:\ElabPh\SDMMC\PIC WAV Player\PIC18 SD WAV Audio Player\src\diskio.h"
typedef BYTE DSTATUS;



typedef enum {
RES_OK = 0,
RES_ERROR,
RES_NOTRDY,
RES_PARERR
} DRESULT;

# 26
DSTATUS disk_initialize (void);
DRESULT disk_readp (BYTE*, DWORD, WORD, WORD);
DRESULT disk_writep (const BYTE*, DWORD);

# 33 "D:\ElabPh\SDMMC\PIC WAV Player\PIC18 SD WAV Audio Player\src\pff.c"
static
FATFS *FatFs;

# 43
static
void mem_set (void* dst, int val, int cnt) {
char *d = (char*)dst;
while (cnt--) *d++ = (char)val;
}


static
int mem_cmp (const void* dst, const void* src, int cnt) {
const char *d = (const char *)dst, *s = (const char *)src;
int r = 0;
while (cnt-- && (r = *d++ - *s++) == 0) ;
return r;
}

# 64
static
DWORD get_fat (
DWORD clst
)
{
WORD wc, bc, ofs;
BYTE buf[4];
FATFS *fs = FatFs;


if (clst < 2 || clst >= fs->max_clust)
return 1;

switch (fs->fs_type) {
case 1 :
bc = (WORD)clst; bc += bc / 2;
ofs = bc % 512; bc /= 512;
if (ofs != 511) {
if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
} else {
if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
}
wc = (WORD)(*(WORD*)(BYTE*)(buf));
return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

case 2 :
if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
return (WORD)(*(WORD*)(BYTE*)(buf));

case 3 :
if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
return (DWORD)(*(DWORD*)(BYTE*)(buf)) & 0x0FFFFFFF;

}

return 1;
}

# 110
static
DWORD clust2sect (
DWORD clst
)
{
FATFS *fs = FatFs;


clst -= 2;
if (clst >= (fs->max_clust - 2)) return 0;
return (DWORD)clst * fs->csize + fs->database;
}

# 130
static
FRESULT dir_rewind (
DIR *dj
)
{
DWORD clst;
FATFS *fs = FatFs;


dj->index = 0;
clst = dj->sclust;
if (clst == 1 || clst >= fs->max_clust)
return FR_DISK_ERR;

if (!clst && fs->fs_type == 3)
clst = fs->dirbase;

dj->clust = clst;
dj->sect = clst ? clust2sect(clst) : fs->dirbase;

return FR_OK;
}

# 160
static
FRESULT dir_next (
DIR *dj
)
{
DWORD clst;
WORD i;
FATFS *fs = FatFs;


i = dj->index + 1;
if (!i || !dj->sect)
return FR_NO_FILE;

if (!(i & (16-1))) {
dj->sect++;

if (dj->clust == 0) {
if (i >= fs->n_rootdir)
return FR_NO_FILE;
}
else {
if (((i / 16) & (fs->csize-1)) == 0) {
clst = get_fat(dj->clust);
if (clst <= 1) return FR_DISK_ERR;
if (clst >= fs->max_clust)
return FR_NO_FILE;
dj->clust = clst;
dj->sect = clust2sect(clst);
}
}
}

dj->index = i;

return FR_OK;
}

# 205
static
FRESULT dir_find (
DIR *dj
)
{
FRESULT res;
BYTE c, *dir;


res = dir_rewind(dj);
if (res != FR_OK) return res;

dir = FatFs->buf;
do {
res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)
? FR_DISK_ERR : FR_OK;
if (res != FR_OK) break;
c = dir[0];
if (c == 0) { res = FR_NO_FILE; break; }
if (!(dir[11] & 0x08) && !mem_cmp(dir, dj->fn, 11))
break;
res = dir_next(dj);
} while (res == FR_OK);

return res;
}

# 239
static
FRESULT dir_read (
DIR *dj
)
{
FRESULT res;
BYTE a, c, *dir;


res = FR_NO_FILE;
dir = FatFs->buf;
while (dj->sect) {
res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)
? FR_DISK_ERR : FR_OK;
if (res != FR_OK) break;
c = dir[0];
if (c == 0) { res = FR_NO_FILE; break; }
a = dir[11] & 0x3F;
if (c != 0xE5 && c != '.' && !(a & 0x08))
break;
res = dir_next(dj);
if (res != FR_OK) break;
}

if (res != FR_OK) dj->sect = 0;

return res;
}

# 279
static
FRESULT create_name (
DIR *dj,
const char **path
)
{
BYTE c, d, ni, si, i, *sfn;
const char *p;


sfn = dj->fn;
mem_set(sfn, ' ', 11);
si = i = 0; ni = 8;
p = *path;
for (;;) {
c = p[si++];
if (c <= ' ' || c == '/') break;
if (c == '.' || i >= ni) {
if (ni != 8 || c != '.') break;
i = 8; ni = 11;
continue;
}

# 305
if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (BYTE)(c) <= 0xFC)) && i >= ni - 1) {
d = p[si++];
sfn[i++] = c;
sfn[i++] = d;
} else {
if ((((c)>='a')&&((c)<='z'))) c -= 0x20;
sfn[i++] = c;
}
}
*path = &p[si];

sfn[11] = (c <= ' ') ? 1 : 0;

return FR_OK;
}

# 328
static
void get_fileinfo (
DIR *dj,
FILINFO *fno
)
{
BYTE i, c, *dir;
char *p;


p = fno->fname;
if (dj->sect) {
dir = FatFs->buf;
for (i = 0; i < 8; i++) {
c = dir[i];
if (c == ' ') break;
if (c == 0x05) c = 0xE5;
*p++ = c;
}
if (dir[8] != ' ') {
*p++ = '.';
for (i = 8; i < 11; i++) {
c = dir[i];
if (c == ' ') break;
*p++ = c;
}
}
fno->fattrib = dir[11];
fno->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir+28));
fno->fdate = (WORD)(*(WORD*)(BYTE*)(dir+24));
fno->ftime = (WORD)(*(WORD*)(BYTE*)(dir+22));
}
*p = 0;
}

# 370
static
FRESULT follow_path (
DIR *dj,
const char *path
)
{
FRESULT res;
BYTE *dir;


while (*path == ' ') path++;
if (*path == '/') path++;
dj->sclust = 0;

if ((BYTE)*path <= ' ') {
res = dir_rewind(dj);
FatFs->buf[0] = 0;

} else {
for (;;) {
res = create_name(dj, &path);
if (res != FR_OK) break;
res = dir_find(dj);
if (res != FR_OK) {
if (res == FR_NO_FILE && !*(dj->fn+11))
res = FR_NO_PATH;
break;
}
if (*(dj->fn+11)) break;
dir = FatFs->buf;
if (!(dir[11] & 0x10)) {
res = FR_NO_PATH; break;
}
dj->sclust =

((DWORD)(WORD)(*(WORD*)(BYTE*)(dir+20)) << 16) |

(WORD)(*(WORD*)(BYTE*)(dir+26));
}
}

return res;
}

# 421
static
BYTE check_fs (
BYTE *buf,
DWORD sect
)
{
if (disk_readp(buf, sect, 510, 2))
return 3;
if ((WORD)(*(WORD*)(BYTE*)(buf)) != 0xAA55)
return 2;

if (!disk_readp(buf, sect, 54, 2) && (WORD)(*(WORD*)(BYTE*)(buf)) == 0x4146)
return 0;

if (!disk_readp(buf, sect, 82, 2) && (WORD)(*(WORD*)(BYTE*)(buf)) == 0x4146)
return 0;

return 1;
}

# 456
FRESULT pf_mount (
FATFS *fs
)
{
BYTE fmt, buf[36];
DWORD bsect, fsize, tsect, mclst;


FatFs = 0;
if (!fs) return FR_OK;

if (disk_initialize() & 0x01)
return FR_NOT_READY;


bsect = 0;
fmt = check_fs(buf, bsect);
if (fmt == 1) {

if (disk_readp(buf, bsect, 446, 16)) {
fmt = 3;
} else {
if (buf[4]) {
bsect = (DWORD)(*(DWORD*)(BYTE*)(&buf[8]));
fmt = check_fs(buf, bsect);
}
}
}
if (fmt == 3) return FR_DISK_ERR;
if (fmt) return FR_NO_FILESYSTEM;


if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;

fsize = (WORD)(*(WORD*)(BYTE*)(buf+22-13));
if (!fsize) fsize = (DWORD)(*(DWORD*)(BYTE*)(buf+36-13));

fsize *= buf[16-13];
fs->fatbase = bsect + (WORD)(*(WORD*)(BYTE*)(buf+14-13));
fs->csize = buf[13-13];
fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(buf+17-13));
tsect = (WORD)(*(WORD*)(BYTE*)(buf+19-13));
if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(buf+32-13));
mclst = (tsect
- (WORD)(*(WORD*)(BYTE*)(buf+14-13)) - fsize - fs->n_rootdir / 16
) / fs->csize + 2;
fs->max_clust = (DWORD)mclst;

fmt = 1;
if (mclst >= 0xFF7) fmt = 2;
if (mclst >= 0xFFF7)

fmt = 3;

# 513
fs->fs_type = fmt;

if (fmt == 3)
fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(buf+(44-13)));
else

fs->dirbase = fs->fatbase + fsize;
fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;

fs->flag = 0;
FatFs = fs;

return FR_OK;
}

# 535
FRESULT pf_open (
const char *path
)
{
FRESULT res;
DIR dj;
BYTE sp[12], dir[32];
FATFS *fs = FatFs;


if (!fs)
return FR_NOT_ENABLED;

fs->flag = 0;
fs->buf = dir;
dj.fn = sp;
res = follow_path(&dj, path);
if (res != FR_OK) return res;
if (!dir[0] || (dir[11] & 0x10))
return FR_NO_FILE;

fs->org_clust =

((DWORD)(WORD)(*(WORD*)(BYTE*)(dir+20)) << 16) |

(WORD)(*(WORD*)(BYTE*)(dir+26));
fs->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir+28));
fs->fptr = 0;
fs->flag = 0x01;

return FR_OK;
}

# 576
FRESULT pf_read (
void* buff,
WORD btr,
WORD* br
)
{
DRESULT dr;
DWORD clst;
DWORD sect, remain;
BYTE *rbuff = buff;
WORD rcnt;
FATFS *fs = FatFs;


*br = 0;
if (!fs) return FR_NOT_ENABLED;
if (!(fs->flag & 0x01))
return FR_NOT_OPENED;

remain = fs->fsize - fs->fptr;
if (btr > remain) btr = (WORD)remain;

while (btr) {
if ((fs->fptr % 512) == 0) {
if ((fs->fptr / 512 % fs->csize) == 0) {
clst = (fs->fptr == 0) ?
fs->org_clust : get_fat(fs->curr_clust);
if (clst <= 1) goto fr_abort;
fs->curr_clust = clst;
fs->csect = 0;
}
sect = clust2sect(fs->curr_clust);
if (!sect) goto fr_abort;
fs->dsect = sect + fs->csect++;
}
rcnt = 512 - ((WORD)fs->fptr % 512);
if (rcnt > btr) rcnt = btr;
dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
if (dr) goto fr_abort;
fs->fptr += rcnt; rbuff += rcnt;
btr -= rcnt; *br += rcnt;
}

return FR_OK;

fr_abort:
fs->flag = 0;
return FR_DISK_ERR;
}

# 704
FRESULT pf_lseek (
DWORD ofs
)
{
DWORD clst;
DWORD bcs, sect, ifptr;
FATFS *fs = FatFs;


if (!fs) return FR_NOT_ENABLED;
if (!(fs->flag & 0x01))
return FR_NOT_OPENED;

if (ofs > fs->fsize) ofs = fs->fsize;
ifptr = fs->fptr;
fs->fptr = 0;
if (ofs > 0) {
bcs = (DWORD)fs->csize * 512;
if (ifptr > 0 &&
(ofs - 1) / bcs >= (ifptr - 1) / bcs) {
fs->fptr = (ifptr - 1) & ~(bcs - 1);
ofs -= fs->fptr;
clst = fs->curr_clust;
} else {
clst = fs->org_clust;
fs->curr_clust = clst;
}
while (ofs > bcs) {
clst = get_fat(clst);
if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
fs->curr_clust = clst;
fs->fptr += bcs;
ofs -= bcs;
}
fs->fptr += ofs;
sect = clust2sect(clst);
if (!sect) goto fe_abort;
fs->csect = (BYTE)(ofs / 512);
if (ofs % 512)
fs->dsect = sect + fs->csect++;
}

return FR_OK;

fe_abort:
fs->flag = 0;
return FR_DISK_ERR;
}

# 761
FRESULT pf_opendir (
DIR *dj,
const char *path
)
{
FRESULT res;
BYTE sp[12], dir[32];
FATFS *fs = FatFs;


if (!fs) {
res = FR_NOT_ENABLED;
} else {
fs->buf = dir;
dj->fn = sp;
res = follow_path(dj, path);
if (res == FR_OK) {
if (dir[0]) {
if (dir[11] & 0x10) {
dj->sclust =

((DWORD)(WORD)(*(WORD*)(BYTE*)(dir+20)) << 16) |

(WORD)(*(WORD*)(BYTE*)(dir+26));
} else {
res = FR_NO_PATH;
}
}
if (res == FR_OK)
res = dir_rewind(dj);
}
if (res == FR_NO_FILE) res = FR_NO_PATH;
}

return res;
}

# 805
FRESULT pf_readdir (
DIR *dj,
FILINFO *fno
)
{
FRESULT res;
BYTE sp[12], dir[32];
FATFS *fs = FatFs;


if (!fs) {
res = FR_NOT_ENABLED;
} else {
fs->buf = dir;
dj->fn = sp;
if (!fno) {
res = dir_rewind(dj);
} else {
res = dir_read(dj);
if (res == FR_NO_FILE) {
dj->sect = 0;
res = FR_OK;
}
if (res == FR_OK) {
get_fileinfo(dj, fno);
res = dir_next(dj);
if (res == FR_NO_FILE) {
dj->sect = 0;
res = FR_OK;
}
}
}
}

return res;
}

